name: Rust CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: macos-latest
    env:
      METAL_DEVICE_WRAPPER_TYPE: 1
      METAL_DEBUG_ERROR_MODE: 10
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Run tests
        run: |
          cargo test --features skip_metal_tests --verbose -- --nocapture --test-threads=1

  fmt:
    name: Rustfmt
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install commitlint
        run: |
          cargo install commitlint --locked
      - name: Run commitlint
        run: |
          git log -1 --pretty=format:"%s" | commitlint

  version:
    name: Update version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
          
      # Import GPG key
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Configure Git
        run: |
          # Get the GPG key ID
          GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          
          # Configure Git with the signing key
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git config --global user.signingkey "$GPG_KEY_ID"
          git config --global commit.gpgsign true

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install cargo-edit
        run: |
          cargo install cargo-edit --locked

      - name: Bump version
        id: bump_version
        run: |
          # Create timestamp for unique branch name
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="version-bump-${TIMESTAMP}"

          # Create new branch for version bump
          git checkout -b $BRANCH_NAME
          
          # Parse the most recent commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Get current version
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          
          # Determine version bump type
          if echo "$COMMIT_MSG" | grep -qE '^BREAKING CHANGE:'; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qE '^feat:'; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi

          # Bump version in Cargo.toml
          if [[ $CURRENT_VERSION == *"-alpha"* ]]; then
            # If it's an alpha version, increment the alpha number
            BASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-alpha\.[0-9]*$//')
            ALPHA_NUM=$(echo $CURRENT_VERSION | sed 's/.*-alpha\.\([0-9]*\)$/\1/')
            NEW_ALPHA_NUM=$((ALPHA_NUM + 1))
            NEW_VERSION="${BASE_VERSION}-alpha.${NEW_ALPHA_NUM}"
            cargo set-version $NEW_VERSION
          else
            # If it's not an alpha version, bump according to semantic versioning
            cargo bump $BUMP_TYPE
            NEW_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')

          fi

          # Save version and branch name for later steps
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "::set-output name=new_version::${NEW_VERSION}"
          
          # Commit and push changes with GPG signing
          git add Cargo.toml
          git commit -S -m "chore: bump version to ${NEW_VERSION}"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "chore: bump version to ${{ env.NEW_VERSION }}"
          body: |
            Automated version bump to ${{ env.NEW_VERSION }}
          base: master
          branch: ${{ env.BRANCH_NAME }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: ${{ contains(steps.bump_version.outputs.new_version, '-alpha') }}
