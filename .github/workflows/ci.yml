name: Rust CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install commitlint
        run: |
          cargo install commitlint --locked
      - name: Run commitlint
        run: |
          git log -1 --pretty=format:"%s" | commitlint

  version:
    name: Update version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install cargo-edit
        run: |
          cargo install cargo-edit --locked
      - name: Bump version
        id: bump_version
        run: |
          # Parse the most recent commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          # Determine version bump type
          if echo "$COMMIT_MSG" | grep -qE '^BREAKING CHANGE:'; then
            BUMP_TYPE="major"
          elif echo "$COMMIT_MSG" | grep -qE '^feat:'; then
            BUMP_TYPE="minor"
          else
            BUMP_TYPE="patch"
          fi
          # Bump version in Cargo.toml
          cargo bump $BUMP_TYPE
          # Get the new version
          NEW_VERSION=$(cargo pkgid | cut -d# -f2)
          echo "::set-output name=new_version::$NEW_VERSION"
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "chore: bump version to ${{ steps.bump_version.outputs.new_version }}"
          git push
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release ${{ steps.bump_version.outputs.new_version }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false